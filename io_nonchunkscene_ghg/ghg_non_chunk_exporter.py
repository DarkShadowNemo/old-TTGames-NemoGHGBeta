import bpy
from struct import pack
import bmesh

def WriteModdedGHG(f, TextureCount=True):
    ob = bpy.context.object
    FileSize = f.write(pack("<I", 144)) # size #4
    Unknown = f.write(pack("<I", 0)) # unk # 8
    TextureCount = f.write(pack("<I", 0)) # texture # 12
    TextureEntrySize1 = f.write(pack("<I", 0)) # 144 # 16
    MaterialCount = f.write(pack("<I", len(bpy.data.materials))) # 20
    MatrialSize = f.write(pack("<I", 144)) # 144 # 24
    BoneCount = f.write(pack("<I", len(ob.pose.bones))) #28
    unknownMatrixEntryStartSize1 = f.write(pack("<I", 16*len(ob.pose.bones)+464*len(bpy.data.materials)+13+144+3)) # 32
    PositiveMatrixEntryStartSize1 = f.write(pack("<I", 96*len(ob.pose.bones)+16*len(ob.pose.bones)+464*len(bpy.data.materials)+13+144+3)) # 36
    NegativeMatrixEntryStartSize1 = f.write(pack("<I", 64*len(ob.pose.bones)+96*len(ob.pose.bones)+16*len(ob.pose.bones)+464*len(bpy.data.materials)+13+144+3)) # 40
    Unknown2 = f.write(pack("<I", 0)) # # 44
    EndNegativeMatrixEntryEndSize1 = f.write(pack("<I", 64*len(ob.pose.bones)+64*len(ob.pose.bones)+96*len(ob.pose.bones)+16*len(ob.pose.bones)+464*len(bpy.data.materials)+13+144+3)) #48
    namedtableStartEntrySize1 = f.write(pack("<I", 464*len(bpy.data.materials)+144)) #52
    namedtableEndEntrySize1 = f.write(pack("<I", 16*len(ob.pose.bones)+13)) # #56
    unknownMatrixCount = f.write(pack("<I", 0)) # 0 # 60
    unknownStartMatrixSize1 = f.write(pack("<I", 0)) # 0 # 64
    unknownMatrixCount2 = f.write(pack("<I", 0)) # 0 # 68
    unknownStartMatrixSize2 = f.write(pack("<I", 0)) # 72
    f.write(pack("<I", 1)) # 76
    f.write(pack("<I", 64*len(ob.pose.bones)+64*len(ob.pose.bones)+96*len(ob.pose.bones)+16*len(ob.pose.bones)+464*len(bpy.data.materials)+13+144+3)) # 80
    for i in range(16):
        f.write(pack("<f", 1))

    
    #todo list of material entrysize
    f.write(pack("<I", 160))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))
    for i, mat in enumerate(bpy.data.materials):
        f.write(pack("B", 0x0D))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 0x60))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x10))
        f.write(pack("B", 0x08))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x50))
        f.write(pack("B", 0x07))
        f.write(pack("B", 0x80))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x10))
        f.write(pack("B", 0x0E))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x18))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x1B))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x44))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x42))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x8C))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x4E))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0xDA))
        f.write(pack("B", 0x37))
        f.write(pack("B", 0x05))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x47))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x3F))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x60))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0xA6))
        f.write(pack("B", 255))
        f.write(pack("B", 255))
        f.write(pack("B", 255))
        f.write(pack("B", 0x14))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 8))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 0x13))
        f.write(pack("B", 0))
        f.write(pack("B", 3))
        f.write(pack("B", 0x6C))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 1))
        f.write(pack("<f", 128))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
            
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0x30))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("B", 0x19))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 16384))
        f.write(pack("B", 0x50))
        f.write(pack("B", 0x84))
        f.write(pack("B", 0x8C))
        f.write(pack("B", 0))
        f.write(pack("B", 0x10))
        f.write(pack("B", 0x2C))
        f.write(pack("B", 0x49))
        f.write(pack("B", 0))
        f.write(pack("<I", 0))
        #this comes up automatically up in game
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("<I", 0))
        f.write(pack("B", 0x3D))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("<I", 0))
        f.write(pack("B", 0xF8))
        f.write(pack("B", 0x84))
        f.write(pack("B", 0x8C))
        f.write(pack("B", 0))
        f.write(pack("B", 0xF0))
        f.write(pack("B", 0x87))
        f.write(pack("B", 0x8C))
        f.write(pack("B", 0))
        f.write(pack("B", 0x50))
        f.write(pack("B", 0))
        f.write(pack("B", 0x88))
        f.write(pack("B", 0))
        f.write(pack("<I", 0))
        f.write(pack("<f", mat.specular_intensity))
        f.write(pack("B", 19))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<f", mat.diffuse_color[0]))
        f.write(pack("<f", mat.diffuse_color[1]))
        f.write(pack("<f", mat.diffuse_color[2]))
        f.write(pack("<f", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0xA0))
        f.write(pack("B", 0x41))
        f.write(pack("<f", mat.roughness))
        f.write(pack("B", 0x91))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("<I", 0))
        f.write(pack("B", 0xA6))
        f.write(pack("B", 255))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
    for pbone_ in ob.pose.bones:
        f.write(b"dragonjan_bones")
        f.write(pack("B", 0))
    f.write(b"defaultlayer")
    f.write(pack("B", 0))
    f.write(pack("B", 0))
    f.write(pack("B", 0))
    f.write(pack("B", 0))
    nametable_offset = 1
    for pbone in ob.pose.bones:
        f.write(pack("<f", 1))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 1))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 1))
        f.write(pack("<f", 0))

        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 1))

        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<f", 0))
        f.write(pack("<I", 0))

        f.write(pack("b", ob.data.bones.find(pbone.parent.name) if pbone.parent is not None else -1))
        f.write(pack("<I", nametable_offset))
        f.write(pack("<I", 0))
        f.write(pack("<I", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        f.write(pack("B", 0))
        nametable_offset+=1
    for pbone in ob.pose.bones:
        f.write(pack("<ffff", *pbone.matrix[0]))
        f.write(pack("<ffff", *pbone.matrix[2]))
        f.write(pack("<ffff", *pbone.matrix[1]))
        f.write(pack("<f", pbone.head.x))
        f.write(pack("<f", pbone.head.y))
        f.write(pack("<f", pbone.head.z))
        f.write(pack("<f", 1))
    for pbone in ob.pose.bones:
        f.write(pack("<ffff", *pbone.matrix[0]))
        f.write(pack("<ffff", *pbone.matrix[2]))
        f.write(pack("<ffff", *pbone.matrix[1]))
        f.write(pack("<f", -pbone.head.x))
        f.write(pack("<f", -pbone.head.y))
        f.write(pack("<f", -pbone.head.z))
        f.write(pack("<f", 1))

    f.write(pack("<I", 64*len(ob.pose.bones)+64*len(ob.pose.bones)+96*len(ob.pose.bones)+16*len(ob.pose.bones)+464*len(bpy.data.materials)+13+144+3+20))
    f.write(pack("<I", 64*len(ob.pose.bones)+64*len(ob.pose.bones)+96*len(ob.pose.bones)+16*len(ob.pose.bones)+464*len(bpy.data.materials)+13+144+3+36))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0)) #2nd offset entry start size
    f.write(b"defaultlayer")
    f.write(pack("B", 0))
    f.write(pack("B", 0))
    f.write(pack("B", 0))
    f.write(pack("B", 0))
    f.write(pack("<I", 0))
    f.write(pack("<I", 0))
    f.write(pack("<I", 6+1+1+48*len(bpy.data.meshes)+64*len(ob.pose.bones)+64*len(ob.pose.bones)+96*len(ob.pose.bones)+16*len(ob.pose.bones)+464*len(bpy.data.materials)+13+144+3+44))
    for i, offset_obdata1 in enumerate(bpy.data.meshes):
        uv_offset_1 = True
        vertexColor_offset_1 = True
        f.write(pack("B", 3))
        f.write(pack("B", 1))
        f.write(pack("B", 0))
        f.write(pack("B", 1))
        f.write(pack("B", 3))
        f.write(pack("B", 128))
        f.write(pack("B", 3))
        f.write(pack("B", 108))
        if len(offset_obdata1.vertices) == 3:
            
            for v in offset_obdata1.vertices:
                f.write(pack("<f", v.co.x))
                f.write(pack("<f", v.co.y))
                f.write(pack("<f", v.co.z))
                f.write(pack("<f", 1))
            f.write(pack("B", 1))
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 1))
            f.write(pack("B", 0))
            f.write(pack("B", 3))
            f.write(pack("B", 0))
            f.write(pack("B", 20))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 96))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
            f.write(pack("B", 0))
        else:
            raise Exception("must contain 3 verts only")
        if uv_offset_1 == True:
            pass
        if vertexColor_offset_1 == True:
            pass

"""import bpy
import bmesh

obj=bpy.context.object
if obj.mode == 'EDIT':
    bm=bmesh.from_edit_mesh(obj.data)
    for v in bm.verts:
        if v.select:
            print(v.co)
else:
    print("Object is not in edit mode.")"""

def WritingEditGHG(filepath):
    with open(filepath, "wb") as f:
        WriteModdedGHG(f)
        
    
    
    
    

